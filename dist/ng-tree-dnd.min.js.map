{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","fnController","$scope","$element","$attrs","timeLoadData","treeData","tmpTreeData","reload_data","timeReloadData","check_exist_attr","attrs","existAttr","isAnd","angular","isUndefinedOrNull","isUndefined","isArray","for_each_attrs","exist","i","len","length","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","isFunction","$watch","val","indexOf","$safeApply","fn","phase","this","$root","$$phase","$apply","getExpandOn","_len","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","push","field","colDefinitions","do_f","root","node","parent","parent_real","level","visible","index","_i","_icon","_index_real","_dept","_hashKey","__children__","__parent_real__","__parent__","__expanded__","expandLevel","__index__","__index_real__","__level__","__icon__","__icon_class__","$class","icon","__visible__","__uid__","Math","random","getHash","__hashKey__","primary_key","__dept__","oData","console","time","_data","_tree_nodes","isDefined","expandOn","columnDefs","orderBy","_fnInitOrderBy","filter","_fnInitFilter","filterOptions","_deptTotal","tree_nodes","timeEnd","indent","indent_plus","indent_unit","$tree_class","$type","$globals","copy","extend","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","checkSibling","_nodes","getLastDescendant","last_child","n","tree","selected_node","getElementChilds","element","querySelector","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","accept","dragInfo","moveTo","isChanged","dropEnabled","calsIndent","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","event","changeKey","_key","__selected__","replace","clone","_this","remove","delayReload","temp","splice","clearInfo","__inited__","add","pos","deleteScope","scope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","info","changed","drag","target","dropped","pass","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","isMove","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","getNode","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","_fnGetControl","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","equals","updateLimit","$TreeLimit","fnCompile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","success","data","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","then","templateUrl","getPath","restrict","controller","compile","fnInitTreeDnDViewport","$q","update","viewportRect","width","eWindow","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","isUpdating","isRender","updateAgain","recursivePromise","item","number","items","renderTime","cancel","setViewport","viewport","getViewport","updateDelayed","updateTimeout","nodeTemplate","getItems","$initViewport","on","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","fnLink","fnWatchNode","newVal","oldVal","fnHiddenChild","nodeScope","nodeOf","keyNode","first","parentReal","_childs","hashKey","childsElem","$node_class","enabledDnD","treeDndNode","log","getData","getScopeNode","objexpr","objprops","keyO","lenO","skipAttr","keepAttr","lenKeep","join","$on","$nodes_class","$inject","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","$injector","_fnget","name","has","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","_filter","_state","isObject","fnInitFilter","keyChild","_fnOrderBy","fnOrderBy","_fnOrder","list","_fnMain","isString","_fnPlaceHolder","$params","_offset","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_$scope","preventDefault","offsetEdge","_tbody","_frag","_width","_scope","_needCollapse","_copied","createDocumentFragment","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","document_width","scrollWidth","offsetWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","_fnDragEnd","clearData","$$apply","_status","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","lastElement","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = isUndefinedOrNull;\r\n\r\n    angular.isDefined = isDefined;\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\r\n        .constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    );angular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty();\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                element.replaceWith($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNode', ['$TreeDnDViewport', '$timeout', function ($TreeDnDViewport, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     fnLink\r\n        };\r\n        function fnLink(scope, element, attrs) {\r\n\r\n            scope.$node_class = '';\r\n\r\n            if (scope.$class.node) {\r\n                element.addClass(scope.$class.node);\r\n                scope.$node_class = scope.$class.node;\r\n            }\r\n            var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\r\n                keyNode    = attrs.treeDndNode,\r\n                first      = true,\r\n                childsElem;\r\n\r\n            console.log('Created Node');\r\n            $TreeDnDViewport.add(scope, element);\r\n\r\n            if (enabledDnD) {\r\n                scope.$type = 'TreeDnDNode';\r\n\r\n                scope.getData = function () {\r\n                    return scope[keyNode];\r\n                };\r\n            }\r\n\r\n            scope.$element            = element;\r\n            scope[keyNode].__inited__ = true;\r\n\r\n            scope.getElementChilds = function () {\r\n                return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n            };\r\n\r\n            scope.setScope(scope, scope[keyNode]);\r\n\r\n            scope.getScopeNode = function () {\r\n                return scope;\r\n            };\r\n\r\n            var objprops = [],\r\n                objexpr,\r\n                i, keyO  = Object.keys(scope[keyNode]),\r\n                lenO     = keyO.length,\r\n                hashKey  = scope[keyNode].__hashKey__,\r\n                skipAttr = [\r\n                    '__visible__',\r\n                    '__children__',\r\n                    '__level__',\r\n                    '__index__',\r\n                    '__index_real__',\r\n\r\n                    '__parent__',\r\n                    '__parent_real__',\r\n                    '__dept__',\r\n                    '__icon__',\r\n                    '__icon_class__'\r\n                ],\r\n                keepAttr = [\r\n                    '__expanded__'\r\n                ],\r\n                lenKeep  = keepAttr.length;\r\n\r\n            // skip __visible__\r\n            for (i = 0; i < lenO + lenKeep; i++) {\r\n                if (i < lenO) {\r\n                    if (skipAttr.indexOf(keyO[i]) === -1) {\r\n                        objprops.push(keyNode + '.' + keyO[i]);\r\n                    }\r\n                } else {\r\n                    if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\r\n                        objprops.push(keyNode + '.' + keepAttr[i - lenO]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            objexpr = '[' + objprops.join(',') + ']';\r\n\r\n            scope.$watch(objexpr, fnWatchNode, true);\r\n\r\n            scope.$on('$destroy', function () {\r\n                scope.deleteScope(scope, scope[keyNode]);\r\n            });\r\n\r\n            function fnWatchNode(newVal, oldVal, scope) {\r\n\r\n                console.time('Node_Changed');\r\n                var nodeOf = scope[keyNode],\r\n                    _icon;\r\n\r\n                if (first) {\r\n                    _icon                 = nodeOf.__icon__;\r\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\r\n                } else {\r\n\r\n                    var parentReal = nodeOf.__parent_real__,\r\n                        parentNode = scope.tree_nodes[parentReal] || null,\r\n                        _childs    = nodeOf.__children__,\r\n                        _len       = _childs.length,\r\n                        _i;\r\n\r\n                    if (!nodeOf.__inited__) {\r\n                        nodeOf.__inited__ = true;\r\n                    }\r\n\r\n                    if (nodeOf.__hashKey__ !== hashKey) {\r\n                        // clear scope in $globals\r\n                        scope.deleteScope(scope, nodeOf);\r\n\r\n                        // add new scope into $globals\r\n                        scope.setScope(scope, nodeOf);\r\n                        hashKey = nodeOf.__hashKey__;\r\n                    }\r\n\r\n                    if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\r\n                        element.addClass(scope.$class.hidden);\r\n                        nodeOf.__visible__ = false;\r\n                    } else {\r\n                        element.removeClass(scope.$class.hidden);\r\n                        nodeOf.__visible__ = true;\r\n                    }\r\n\r\n                    if (_len === 0) {\r\n                        _icon = -1;\r\n                    } else {\r\n                        if (nodeOf.__expanded__) {\r\n                            _icon = 1;\r\n                        } else {\r\n                            _icon = 0;\r\n                        }\r\n                    }\r\n\r\n                    nodeOf.__icon__       = _icon;\r\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\r\n\r\n                    if (scope.isTable) {\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            scope.for_all_descendants(_childs[_i], fnHiddenChild, nodeOf, true);\r\n                        }\r\n                    } else {\r\n                        if (!childsElem) {\r\n                            childsElem = scope.getElementChilds();\r\n                        }\r\n\r\n                        if (nodeOf.__expanded__) {\r\n                            childsElem.removeClass(scope.$class.hidden);\r\n                        } else {\r\n                            childsElem.addClass(scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                console.timeEnd('Node_Changed');\r\n                first      = false;\r\n\r\n                function fnHiddenChild(node, parent) {\r\n                    var nodeScope = scope.getScope(node);\r\n                    if (nodeScope) {\r\n                        if (parent && parent.__expanded__  && parent.__visible__) {\r\n                            nodeScope.$element.removeClass(scope.$class.hidden);\r\n                            node.__visible__ = true;\r\n                        } else {\r\n                            nodeScope.$element.addClass(scope.$class.hidden);\r\n                            node.__visible__ = false;\r\n                        }\r\n                    } else {\r\n                        // show node & init scope\r\n                        if (parent && parent.__expanded__  && parent.__visible__) {\r\n                            node.__visible__ = true;\r\n                        }else{\r\n                            node.__visible__ = false;\r\n                        }\r\n                    }\r\n\r\n                    // skip all child hiding... if not expaned\r\n                    return node.__expanded__ === false;\r\n                }\r\n            }\r\n        }\r\n    }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element/*, attrs*/) {\r\n                scope.$type = 'TreeDnDNodes';\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                } else {\r\n                    scope.$nodes_class = '';\r\n                }\r\n            }\r\n        };\r\n    }\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDnd', fnInitTreeDnD);\r\n\r\nfnInitTreeDnD.$inject = [\r\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\r\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\r\n];\r\n\r\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\r\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport\r\n) {\r\n    return {\r\n        restrict:   'E',\r\n        scope:      true,\r\n        replace:    true,\r\n        controller: ['$scope', '$element', '$attrs', fnController],\r\n        compile:    fnCompile\r\n    };\r\n\r\n    function fnController($scope, $element, $attrs) {\r\n        $scope.indent      = 20;\r\n        $scope.indent_plus = 15;\r\n        $scope.indent_unit = 'px';\r\n        $scope.$tree_class = 'table';\r\n        $scope.primary_key = '__uid__';\r\n\r\n        $scope.$type = 'TreeDnD';\r\n        // $scope.enabledFilter = null;\r\n        $scope.colDefinitions = [];\r\n        $scope.$globals       = {};\r\n        $scope.$class         = {};\r\n\r\n        $scope.treeData   = [];\r\n        $scope.tree_nodes = [];\r\n\r\n        $scope.$class = angular.copy($TreeDnDClass);\r\n        angular.extend(\r\n            $scope.$class.icon, {\r\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n            }\r\n        );\r\n\r\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\r\n            if (angular.isFunction(fn)) {\r\n                var _i, _len, _nodes;\r\n\r\n                if (fn(node, parent)) {\r\n                    // have error or need ignore children\r\n                    return false;\r\n                }\r\n                _nodes = node.__children__;\r\n                _len   = _nodes.length;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\r\n                        // skip sibling of node checking\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            // succeed then continue\r\n            return true;\r\n        };\r\n\r\n        $scope.getLastDescendant = function (node) {\r\n            var last_child, n;\r\n            if (!node) {\r\n                node = $scope.tree ? $scope.tree.selected_node : false;\r\n            }\r\n            if (node === false) {\r\n                return false;\r\n            }\r\n            n = node.__children__.length;\r\n            if (n === 0) {\r\n                return node;\r\n            } else {\r\n                last_child = node.__children__[n - 1];\r\n                return $scope.getLastDescendant(last_child);\r\n            }\r\n        };\r\n\r\n        $scope.getElementChilds = function () {\r\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n        };\r\n\r\n        $scope.onClick = function (node) {\r\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                // We want to detach from Angular's digest cycle so we can\r\n                // independently measure the time for one cycle.\r\n                setTimeout(\r\n                    function () {\r\n                        $scope.tree.on_click(node);\r\n                    }, 0\r\n                );\r\n            }\r\n        };\r\n\r\n        $scope.onSelect = function (node) {\r\n            if (angular.isDefined($scope.tree)) {\r\n                if (node !== $scope.tree.selected_node) {\r\n                    $scope.tree.select_node(node);\r\n                }\r\n\r\n                if (angular.isFunction($scope.tree.on_select)) {\r\n                    setTimeout(\r\n                        function () {\r\n                            $scope.tree.on_select(node);\r\n                        }, 0\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        var passedExpand, _clone;\r\n        $scope.toggleExpand = function (node, fnCallback) {\r\n            passedExpand = true;\r\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                passedExpand = false;\r\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                passedExpand = false;\r\n            }\r\n\r\n            if (passedExpand) {\r\n                if (node.__children__.length > 0) {\r\n                    node.__expanded__ = !node.__expanded__;\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.getHash = function (node) {\r\n            return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n        };\r\n\r\n        $scope.$callbacks = {\r\n            for_all_descendants: $scope.for_all_descendants,\r\n            /*expand:              function (node) {\r\n             return true;\r\n             },*/\r\n            accept:              function (dragInfo, moveTo, isChanged) {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                var unit = 0,\r\n                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                if (!skipUnit) {\r\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                }\r\n\r\n                if (level - 1 < 1) {\r\n                    return edge + unit;\r\n                } else {\r\n                    return $scope.indent * (level - 1) + edge + unit;\r\n                }\r\n            },\r\n            droppable:           function () {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            draggable:           function () {\r\n                return $scope.dragEnabled === true;\r\n            },\r\n            beforeDrop:          function (event) {\r\n                return true;\r\n            },\r\n            changeKey:           function (node) {\r\n                var _key     = node.__uid__;\r\n                node.__uid__ = Math.random();\r\n                if (node.__selected__) {\r\n                    delete node.__selected__;\r\n                }\r\n\r\n                if ($scope.primary_key !== '__uid__') {\r\n                    _key = '' + node[$scope.primary_key];\r\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                    node[$scope.primary_key] = _key;\r\n                }\r\n                // delete(node.__hashKey__);\r\n            },\r\n            clone:               function (node, _this) {\r\n                _clone = angular.copy(node);\r\n                this.for_all_descendants(_clone, this.changeKey);\r\n                return _clone;\r\n            },\r\n            remove:              function (node, parent, _this, delayReload) {\r\n                var temp = parent.splice(node.__index__, 1)[0];\r\n                if (!delayReload) {\r\n                    $scope.reload_data();\r\n                }\r\n                return temp;\r\n            },\r\n            clearInfo:                function (node) {\r\n                delete node.__inited__;\r\n                delete node.__visible__;\r\n\r\n                // always changed after call reload_data\r\n                //delete node.__hashKey__;\r\n            },\r\n            add:                 function (node, pos, parent, _this) {\r\n                // clearInfo\r\n                this.for_all_descendants(node, this.clearInfo);\r\n                if (parent) {\r\n                    if (parent.length > -1) {\r\n                        if (pos > -1) {\r\n                            parent.splice(pos, 0, node);\r\n                        } else {\r\n                            // todo If children need load crazy\r\n                            parent.push(node);\r\n                        }\r\n                    } else {\r\n                        parent.push(node);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.deleteScope = function (scope, node) {\r\n            var _hash = node.__hashKey__;\r\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\r\n                delete $scope.$globals[_hash];\r\n            }\r\n        };\r\n\r\n        $scope.setScope = function (scope, node) {\r\n            var _hash = node.__hashKey__;\r\n            if ($scope.$globals[_hash] !== scope) {\r\n                $scope.$globals[_hash] = scope;\r\n            }\r\n        };\r\n\r\n        $scope.getScope = function (node) {\r\n            if (node) {\r\n                var _hash = node.__hashKey__;\r\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\r\n                return $scope.$globals[_hash];\r\n            }\r\n            return $scope;\r\n        };\r\n\r\n        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n            $scope.placeElm = null;\r\n            //                            $scope.dragBorder = 30;\r\n            $scope.dragEnabled = null;\r\n            $scope.dropEnabled = null;\r\n            $scope.horizontal  = null;\r\n\r\n            if ($attrs.enableDrag) {\r\n\r\n                $scope.dragDelay       = 0;\r\n                $scope.enabledMove     = true;\r\n                $scope.statusMove      = true;\r\n                $scope.enabledHotkey   = false;\r\n                $scope.enabledCollapse = null;\r\n                $scope.statusElm       = null;\r\n                $scope.dragging        = null;\r\n\r\n                angular.extend(\r\n                    $scope.$callbacks, {\r\n                        beforeDrag: function (scopeDrag) {\r\n                            return true;\r\n                        },\r\n                        dragStop:   function (info, passed) {\r\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\r\n                                return null;\r\n                            }\r\n\r\n                            info.target.reload_data();\r\n\r\n                            if (info.target !== info.drag && info.drag.enabledMove) {\r\n                                info.drag.reload_data();\r\n                            }\r\n                        },\r\n                        dropped:    function (info, pass) {\r\n                            if (!info) {\r\n                                return null;\r\n                            }\r\n\r\n                            var _node         = info.node,\r\n                                _nodeAdd      = null,\r\n                                _move         = info.move,\r\n                                _parent       = null,\r\n                                _parentRemove = info.parent || info.drag.treeData,\r\n                                _parentAdd    = _move.parent || info.target.treeData,\r\n                                isMove        = info.drag.enabledMove;\r\n\r\n                            if (!info.changed && isMove) {\r\n                                return false;\r\n                            }\r\n\r\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                if (isMove) {\r\n                                    _parent = _parentRemove;\r\n                                    if (angular.isDefined(_parent.__children__)) {\r\n                                        _parent = _parent.__children__;\r\n                                    }\r\n\r\n                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                        _node,\r\n                                        _parent,\r\n                                        info.drag.$callbacks,\r\n                                        true // delay reload\r\n                                    );\r\n                                } else {\r\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                }\r\n\r\n                                // if node dragging change index in sample node parent\r\n                                // and index node decrement\r\n                                if (isMove &&\r\n                                    info.drag === info.target &&\r\n                                    _parentRemove === _parentAdd &&\r\n                                    _move.pos >= info.node.__index__) {\r\n                                    _move.pos--;\r\n                                }\r\n\r\n                                _parent = _parentAdd;\r\n                                if (_parent.__children__) {\r\n                                    _parent = _parent.__children__;\r\n                                }\r\n\r\n                                info.target.$callbacks.add(\r\n                                    _nodeAdd,\r\n                                    _move.pos,\r\n                                    _parent,\r\n                                    info.drag.$callbacks\r\n                                );\r\n\r\n                                return true;\r\n                            }\r\n\r\n                            return false;\r\n                        },\r\n                        dragStart:  function (event) {\r\n                        },\r\n                        dragMove:   function (event) {\r\n                        }\r\n                    }\r\n                );\r\n\r\n                $scope.setDragging = function (dragInfo) {\r\n                    $scope.dragging = dragInfo;\r\n                };\r\n\r\n                $scope.enableMove = function (val) {\r\n                    if (typeof val === 'boolean') {\r\n                        $scope.enabledMove = val;\r\n                    } else {\r\n                        $scope.enabledMove = true;\r\n                    }\r\n                };\r\n\r\n                if ($attrs.enableStatus) {\r\n                    $scope.enabledStatus = false;\r\n\r\n                    $scope.hideStatus = function () {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.refreshStatus = function () {\r\n                        if (!$scope.dragging) {\r\n                            return;\r\n                        }\r\n\r\n                        if ($scope.enabledStatus) {\r\n                            var statusElmOld = $scope.statusElm;\r\n                            if ($scope.enabledMove) {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                            } else {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                            }\r\n\r\n                            if (statusElmOld !== $scope.statusElm) {\r\n                                if (statusElmOld) {\r\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                    statusElmOld.remove();\r\n                                }\r\n                                $document.find('body').append($scope.statusElm);\r\n\r\n                            }\r\n\r\n                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.setPositionStatus = function (e) {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.css(\r\n                                {\r\n                                    'left':    e.pageX + 10 + 'px',\r\n                                    'top':     e.pageY + 15 + 'px',\r\n                                    'z-index': 9999\r\n                                }\r\n                            );\r\n                            $scope.statusElm.addClass($scope.$class.status);\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n\r\n            $scope.targeting = false;\r\n\r\n            $scope.getPrevSibling = function (node) {\r\n                if (node && node.__index__ > 0) {\r\n                    var _parent, _index = node.__index__ - 1;\r\n\r\n                    if (angular.isDefined(node.__parent_real__)) {\r\n                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                        return _parent.__children__[_index];\r\n                    }\r\n                    return $scope.treeData[_index];\r\n\r\n                }\r\n                return null;\r\n            };\r\n\r\n            $scope.getNode = function (index) {\r\n                if (angular.isUndefinedOrNull(index)) {\r\n                    return null;\r\n                }\r\n                return $scope.tree_nodes[index];\r\n            };\r\n\r\n            $scope.initPlace = function (element, dragElm) {\r\n\r\n                if (!$scope.placeElm) {\r\n                    if ($scope.isTable) {\r\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                        var _len_down   = $scope.colDefinitions.length;\r\n                        $scope.placeElm.append(\r\n                            angular.element($window.document.createElement('td'))\r\n                                .addClass($scope.$class.empty)\r\n                                .addClass('indented')\r\n                                .addClass($scope.$class.place)\r\n                        );\r\n                        while (_len_down-- > 0) {\r\n                            $scope.placeElm.append(\r\n                                angular.element($window.document.createElement('td'))\r\n                                    .addClass($scope.$class.empty)\r\n                                    .addClass($scope.$class.place)\r\n                            );\r\n                        }\r\n                    } else {\r\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                            .addClass($scope.$class.empty)\r\n                            .addClass($scope.$class.place);\r\n                    }\r\n\r\n                }\r\n\r\n                if (dragElm) {\r\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                }\r\n\r\n                if (element) {\r\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                } else {\r\n                    $scope.getElementChilds().append($scope.placeElm);\r\n                }\r\n\r\n                return $scope.placeElm;\r\n            };\r\n\r\n            $scope.hidePlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.showPlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.getScopeTree = function () {\r\n                return $scope;\r\n            };\r\n\r\n        }\r\n\r\n        $scope.$safeApply = $safeApply;\r\n\r\n        var _fnInitFilter,\r\n            _fnInitOrderBy,\r\n            _fnGetControl,\r\n            _defaultFilterOption = {\r\n                showParent: true,\r\n                showChild:  false,\r\n                beginAnd:   true\r\n            },\r\n            tree,\r\n            _watches             = [\r\n                [\r\n                    'enableDrag', [\r\n                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                    ['number', 'dragDelay', 0, null, 0],\r\n                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                    [\r\n                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                        if (isHotkey) {\r\n                            $scope.enabledMove = false;\r\n                        } else {\r\n                            $scope.enabledMove = $scope.statusMove;\r\n                        }\r\n                    }]\r\n                ]],\r\n                [\r\n                    ['enableDrag', 'enableStatus'], [\r\n                    [\r\n                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\r\n                        function (_url) {\r\n                            if (_url && $templateCache.get(_url)) {\r\n                                $TreeDnDTemplate.setCopy(_url, $scope);\r\n                            }\r\n                        }],\r\n                    [\r\n                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\r\n                        function (_url) {\r\n                            if (_url && $templateCache.get(_url)) {\r\n                                $TreeDnDTemplate.setMove(_url, $scope);\r\n                            }\r\n                        }]\r\n                ]],\r\n                [\r\n                    [['enableDrag', 'enableDrop']], [\r\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                ],\r\n                [\r\n                    '*', [\r\n                    ['boolean', 'treeTable', true, 'treeTable', null],\r\n                    ['boolean', 'horizontal'],\r\n                    [\r\n                        'callback', 'treeClass', function (val) {\r\n                        switch (typeof val) {\r\n                            case 'string':\r\n                                $scope.$tree_class = val;\r\n                                break;\r\n                            case 'object':\r\n                                angular.extend($scope.$class, val);\r\n                                $scope.$tree_class = $scope.$class.tree;\r\n                                break;\r\n                            default:\r\n                                $scope.$tree_class = $attrs.treeClass;\r\n                                break;\r\n                        }\r\n                    }, 'treeClass', function () {\r\n                        $scope.$tree_class = $scope.$class.tree + ' table';\r\n                    }, null, function () {\r\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\r\n                            $scope.$tree_class = $attrs.treeClass.trim();\r\n                            return true;\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                        function (expandOn) {\r\n                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                $scope.expandingProperty = $attrs.expandOn;\r\n                            }\r\n                        }],\r\n                    [\r\n                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\r\n                        'tree', null, function ($tree) {\r\n\r\n                        if (!angular.isFunction(_fnGetControl)) {\r\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                        }\r\n\r\n                        if (angular.isFunction(_fnGetControl)) {\r\n                            tree = angular.extend(\r\n                                $tree,\r\n                                _fnGetControl($scope)\r\n                            );\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                        function (colDefs) {\r\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                $scope.colDefinitions = getColDefs();\r\n                            }\r\n                        }],\r\n                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\r\n                    [\r\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                        var _passed = false;\r\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                            var _keysF = Object.keys(filters),\r\n                                _lenF  = _keysF.length, _iF;\r\n\r\n                            if (_lenF > 0) {\r\n                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\r\n                                        filters[_keysF[_iF]].length === 0) {\r\n                                        continue;\r\n                                    }\r\n                                    _passed = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $scope.enabledFilter = _passed;\r\n                        reload_data();\r\n                    }],\r\n                    [\r\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                        _defaultFilterOption, function (option) {\r\n                        if (typeof option === 'object') {\r\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                        }\r\n                    }],\r\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\r\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\r\n                    ['number', 'indent', 30, null, 30],\r\n                    ['number', 'indentPlus', 20, null, 20],\r\n                    [\r\n                        'null', 'callbacks',\r\n                        function (optCallbacks) {\r\n                            angular.forEach(\r\n                                optCallbacks, function (value, key) {\r\n                                    if (typeof value === 'function') {\r\n                                        if ($scope.$callbacks[key]) {\r\n                                            $scope.$callbacks[key] = value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            );\r\n                            return $scope.$callbacks;\r\n                        },\r\n                        '$callbacks'\r\n                    ],\r\n                    [\r\n                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                        reload_data();\r\n                    }],\r\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\r\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                ]]\r\n            ],\r\n            w, lenW              = _watches.length,\r\n            i, len,\r\n            _curW,\r\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\r\n\r\n            // debounce reload_Data;\r\n            timeReloadData, tmpTreeData;\r\n\r\n        for (w = 0; w < lenW; w++) {\r\n            // skip if not exist\r\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\r\n                continue;\r\n            }\r\n            _curW = _watches[w][1];\r\n            for (i = 0, len = _curW.length; i < len; i++) {\r\n                _typeW    = _curW[i][0];\r\n                _nameW    = _curW[i][1];\r\n                _defaultW = _curW[i][2];\r\n                _scopeW   = _curW[i][3];\r\n                _NotW     = _curW[i][4];\r\n                _AfterW   = _curW[i][5];\r\n                _BeforeW  = _curW[i][6];\r\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n            }\r\n        }\r\n\r\n        if ($attrs.treeData) {\r\n            $scope.$watch(\r\n                $attrs.treeData, function (val) {\r\n                    if (angular.equals(val, $scope.treeData)) {\r\n                        return;\r\n                    }\r\n\r\n                    tmpTreeData = val;\r\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\r\n                        timeReloadData = $timeout(timeLoadData, 350);\r\n                    }\r\n                }, true\r\n            );\r\n        }\r\n\r\n        function timeLoadData() {\r\n            $scope.treeData = tmpTreeData;\r\n            reload_data();\r\n            timeReloadData  = null;\r\n        }\r\n\r\n        $scope.updateLimit = function updateLimit() {\r\n            //console.log('Call fn UpdateLimit');\r\n            $scope.$TreeLimit += 50;\r\n        };\r\n\r\n        $scope.reload_data = reload_data;\r\n\r\n        function check_exist_attr(attrs, existAttr, isAnd) {\r\n            if (angular.isUndefinedOrNull(existAttr)) {\r\n                return false;\r\n            }\r\n\r\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                return true;\r\n            }\r\n\r\n            if (angular.isArray(existAttr)) {\r\n                return for_each_attrs(attrs, existAttr, isAnd);\r\n            }\r\n        }\r\n\r\n        function for_each_attrs(attrs, exist, isAnd) {\r\n            var i, len = exist.length, passed = false;\r\n\r\n            if (len === 0) {\r\n                return null;\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                    passed = true;\r\n                    if (!isAnd) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (isAnd) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return passed;\r\n        }\r\n\r\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\r\n                               fnBefore\r\n        ) {\r\n            nameScope = nameScope || nameAttr;\r\n            if (typeof type === 'string' || angular.isArray(type)) {\r\n                if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                    return;//jmp\r\n                }\r\n                if (typeof $attrs[nameAttr] === 'string') {\r\n                    $scope.$watch(\r\n                        $attrs[nameAttr], function (val) {\r\n                            if (typeof type === 'string' && typeof val === type ||\r\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\r\n                            ) {\r\n                                $scope[nameScope] = val;\r\n                            } else {\r\n                                if (angular.isFunction(valDefault)) {\r\n                                    $scope[nameScope] = valDefault(val);\r\n                                } else {\r\n                                    $scope[nameScope] = valDefault;\r\n                                }\r\n                            }\r\n\r\n                            if (angular.isFunction(fnAfter)) {\r\n                                fnAfter($scope[nameScope], $scope);\r\n                            }\r\n                        }, true\r\n                    );\r\n                } else {\r\n\r\n                    if (angular.isFunction(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist();\r\n                    } else if (!angular.isUndefined(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function $safeApply(fn) {\r\n            var phase = this.$root.$$phase;\r\n            if (phase === '$apply' || phase === '$digest') {\r\n                if (fn && typeof fn === 'function') {\r\n                    fn();\r\n                }\r\n            } else {\r\n                this.$apply(fn);\r\n            }\r\n        }\r\n\r\n        function getExpandOn() {\r\n            if ($scope.treeData && $scope.treeData.length) {\r\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                    _regex     = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\r\n                    _len,\r\n                    i;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        $scope.expandingProperty = _keys[i];\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Auto get first\r\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\r\n                    $scope.expandingProperty = _keys[0];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function getColDefs() {\r\n            // Auto get Defs except attribute __level__ ....\r\n            if ($scope.treeData.length) {\r\n                var _col_defs = [], _firstNode = $scope.treeData[0],\r\n                    _regex    = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\r\n                    _keys     = Object.keys(_firstNode),\r\n                    i, _len;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        _col_defs.push(\r\n                            {\r\n                                field: _keys[i]\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                $scope.colDefinitions = _col_defs;\r\n            }\r\n        }\r\n\r\n        function do_f(root, node, parent, parent_real, level, visible, index) {\r\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n            if (!angular.isArray(node.__children__)) {\r\n                node.__children__ = [];\r\n            }\r\n\r\n            node.__parent_real__ = parent_real;\r\n            node.__parent__      = parent;\r\n            _len                 = node.__children__.length;\r\n\r\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                node.__expanded__ = level < $scope.expandLevel;\r\n            }\r\n\r\n            if (_len === 0) {\r\n                _icon = -1;\r\n            } else {\r\n                if (node.__expanded__) {\r\n                    _icon = 1;\r\n                } else {\r\n                    _icon = 0;\r\n                }\r\n            }\r\n\r\n            // Insert item vertically\r\n            _index_real         = root.length;\r\n            node.__index__      = index;\r\n            node.__index_real__ = _index_real;\r\n            node.__level__      = level;\r\n            node.__icon__       = _icon;\r\n            node.__icon_class__ = $scope.$class.icon[_icon];\r\n            node.__visible__    = !!visible;\r\n\r\n            if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                node.__uid__ = '' + Math.random();\r\n            }\r\n\r\n            _hashKey = $scope.getHash(node);\r\n\r\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                node.__hashKey__ = _hashKey;\r\n            }\r\n\r\n            root.push(node);\r\n\r\n            // Check node children\r\n            _dept = 1;\r\n            if (_len > 0) {\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _dept += do_f(\r\n                        root,\r\n                        node.__children__[_i],\r\n                        node[$scope.primary_key],\r\n                        _index_real,\r\n                        level + 1,\r\n                        visible && node.__expanded__,\r\n                        _i\r\n                    );\r\n                }\r\n            }\r\n\r\n            node.__dept__ = _dept;\r\n\r\n            return _dept;\r\n        }\r\n\r\n        function reload_data(oData) {\r\n            console.time('Reload_Data');\r\n\r\n            var _data,\r\n                _len,\r\n                _tree_nodes = [];\r\n            if (angular.isDefined(oData)) {\r\n                if (!angular.isArray(oData) || oData.length === 0) {\r\n                    return [];\r\n                } else {\r\n                    _data = oData;\r\n                }\r\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\r\n                return [];\r\n            } else {\r\n                _data = $scope.treeData;\r\n            }\r\n\r\n            if (!$attrs.expandOn) {\r\n                getExpandOn();\r\n            }\r\n\r\n            if (!$attrs.columnDefs) {\r\n                getColDefs();\r\n            }\r\n\r\n            if (angular.isDefined($scope.orderBy)) {\r\n                if (!angular.isFunction(_fnInitOrderBy)) {\r\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitOrderBy)) {\r\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\r\n                }\r\n            }\r\n\r\n            if (angular.isDefined($scope.filter)) {\r\n                if (!angular.isFunction(_fnInitFilter)) {\r\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitFilter)) {\r\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\r\n                }\r\n            }\r\n\r\n            _len = _data.length;\r\n            if (_len > 0) {\r\n                var _i,\r\n                    _deptTotal = 0;\r\n\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                }\r\n\r\n            }\r\n\r\n            // clear memory\r\n            if (angular.isDefined($scope.tree_nodes)) {\r\n                delete $scope.tree_nodes;\r\n            }\r\n\r\n            $scope.tree_nodes = _tree_nodes;\r\n\r\n            console.timeEnd('Reload_Data');\r\n            return _tree_nodes;\r\n        }\r\n    }\r\n\r\n    function fnCompile(tElement) {\r\n\r\n        var $_Template = '',\r\n            _element   = tElement.html().trim();\r\n\r\n        if (_element.length > 0) {\r\n            $_Template = _element;\r\n            tElement.html('');\r\n        }\r\n\r\n        return function fnPost(scope, element, attrs) {\r\n\r\n            if (attrs.enableDrag) {\r\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                if (angular.isFunction(_fnInitDrag)) {\r\n                    _fnInitDrag(scope, element, $window, $document);\r\n                }\r\n            }\r\n\r\n            // kick out $digest\r\n            element.ready(function () {\r\n                // apply Template\r\n                function checkTreeTable(template, scope) {\r\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\r\n                        attrInclude;\r\n\r\n                    scope.isTable = null;\r\n                    if (elemNode) {\r\n                        elemNode    = angular.element(elemNode);\r\n                        attrInclude = elemNode.attr('ng-include');\r\n                    } else {\r\n                        return;\r\n                    }\r\n\r\n                    if (attrInclude) {\r\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\r\n                        if (typeof treeInclude === 'string') {\r\n                            return $http.get(\r\n                                treeInclude,\r\n                                {cache: $templateCache}\r\n                            ).success(\r\n                                function (data) {\r\n                                    data = data.trim();\r\n                                    //scope.templateNode = data;\r\n                                    var tempDiv       = document.createElement('div');\r\n                                    tempDiv.innerHTML = data;\r\n                                    tempDiv           = angular.element(tempDiv);\r\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\r\n                                }\r\n                            );\r\n                        }\r\n                    } else {\r\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\r\n                        //scope.templateNode = elemNode.html();\r\n                    }\r\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\r\n                    //elemNode.html('');\r\n                }\r\n\r\n                //scope.$watch(tableDataLoaded, transformTable);\r\n                /*\r\n                 function tableDataLoaded(elem) {\r\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\r\n                 // until after the table is transformed\r\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\r\n                 return firstCell && !firstCell.style.width;\r\n                 }\r\n\r\n                 function transformTable(elem, attrs) {\r\n                 // reset display styles so column widths are correct when measured below\r\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n                 // wrap in $timeout to give table a chance to finish rendering\r\n                 $timeout(function () {\r\n                 // set widths of columns\r\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\r\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\r\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\r\n\r\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n                 if (tdElems) {\r\n                 tdElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (thElem) {\r\n                 thElem.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (tfElems) {\r\n                 tfElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 });\r\n\r\n                 // set css styles on thead and tbody\r\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\r\n\r\n                 angular.element(elem.querySelectorAll('tbody')).css({\r\n                 'display':  'block',\r\n                 'height':   attrs.tableHeight || 'inherit',\r\n                 'overflow': 'auto'\r\n                 });\r\n\r\n                 // reduce width of last column by width of scrollbar\r\n                 var tbody          = elem.querySelector('tbody');\r\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\r\n                 if (scrollBarWidth > 0) {\r\n                 // for some reason trimming the width by 2px lines everything up better\r\n                 scrollBarWidth -= 2;\r\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\r\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\r\n                 }\r\n                 });\r\n                 }*/\r\n                var promiseCheck;\r\n                if ($_Template.length > 0) {\r\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\r\n                    if (typeof promiseCheck === 'object') {\r\n                        promiseCheck.then(function () {\r\n                            element.append($compile($_Template)(scope));\r\n                        });\r\n                    } else {\r\n                        element.append($compile($_Template)(scope));\r\n                    }\r\n                } else {\r\n                    $http.get(\r\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                        {cache: $templateCache}\r\n                    ).success(\r\n                        function (data) {\r\n                            data         = angular.element(data.trim());\r\n                            promiseCheck = checkTreeTable(data, scope);\r\n                            if (typeof promiseCheck === 'object') {\r\n                                promiseCheck.then(function () {\r\n                                    element.append($compile(data)(scope));\r\n                                });\r\n                            } else {\r\n                                element.append($compile(data)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            })\r\n        };\r\n    }\r\n}\r\n\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function access_child(data, containKey) {\r\n                var _tree = [],\r\n                    _i,\r\n                    _len = data ? data.length : 0,\r\n                    _copy, _child;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _copy = angular.copy(data[_i]);\r\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\r\n                        _child = access_child(_copy[containKey], containKey);\r\n                            delete _copy[containKey];\r\n                        _copy.__children__ = _child;\r\n                    }\r\n                    _tree.push(_copy);\r\n                }\r\n                return _tree;\r\n            }\r\n        };\r\n\r\n        return _$initConvert;\r\n    }\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr =  attr || 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\r\n\r\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\r\n\r\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\r\n\r\n    var viewport      = null,\r\n        isUpdating    = false,\r\n        isRender      = false,\r\n        updateAgain   = false,\r\n        viewportRect,\r\n        items         = [],\r\n        nodeTemplate,\r\n        updateTimeout,\r\n        renderTime,\r\n        $initViewport = {\r\n            setViewport:   setViewport,\r\n            getViewport:   getViewport,\r\n            add:           add,\r\n            setTemplate:   setTemplate,\r\n            getItems:      getItems,\r\n            updateDelayed: updateDelayed\r\n        },\r\n        eWindow       = angular.element($window);\r\n\r\n    eWindow.on('load resize scroll', updateDelayed);\r\n\r\n    return $initViewport;\r\n\r\n    function update() {\r\n\r\n        viewportRect = {\r\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\r\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\r\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\r\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\r\n        };\r\n\r\n        if (isUpdating || isRender) {\r\n            updateAgain = true;\r\n            return;\r\n        }\r\n        isUpdating = true;\r\n\r\n        recursivePromise();\r\n    }\r\n\r\n    function recursivePromise() {\r\n        if (isRender) {\r\n            return;\r\n        }\r\n\r\n        var number = number > 0 ? number : items.length, item;\r\n\r\n        if (number > 0) {\r\n            item = items[0];\r\n\r\n            isRender   = true;\r\n            renderTime = $timeout(function () {\r\n                //item.element.html(nodeTemplate);\r\n                //$compile(item.element.contents())(item.scope);\r\n\r\n                items.splice(0, 1);\r\n                isRender = false;\r\n                number--;\r\n                $timeout.cancel(renderTime);\r\n                recursivePromise();\r\n            }, 0);\r\n\r\n        } else {\r\n            isUpdating = false;\r\n            if (updateAgain) {\r\n                updateAgain = false;\r\n                update();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if a point is inside specified bounds\r\n     * @param x\r\n     * @param y\r\n     * @param bounds\r\n     * @returns {boolean}\r\n     */\r\n    function pointIsInsideBounds(x, y, bounds) {\r\n        return x >= bounds.left &&\r\n               y >= bounds.top &&\r\n               x <= bounds.left + bounds.width &&\r\n               y <= bounds.top + bounds.height;\r\n    }\r\n\r\n    /**\r\n     * @name setViewport\r\n     * @desciption Set the viewport element\r\n     * @param element\r\n     */\r\n    function setViewport(element) {\r\n        viewport = element;\r\n    }\r\n\r\n    /**\r\n     * Return the current viewport\r\n     * @returns {*}\r\n     */\r\n    function getViewport() {\r\n        return viewport;\r\n    }\r\n\r\n    /**\r\n     * trigger an update\r\n     */\r\n    function updateDelayed() {\r\n        $timeout.cancel(updateTimeout);\r\n        updateTimeout = $timeout(function () {\r\n            update();\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Add listener for event\r\n     * @param element\r\n     * @param callback\r\n     */\r\n    function add(scope, element) {\r\n        //console.log('call add');\r\n        updateDelayed();\r\n        items.push({\r\n            element: element,\r\n            scope:   scope\r\n        });\r\n    }\r\n\r\n    function setTemplate(scope, template) {\r\n        nodeTemplate = template;\r\n    }\r\n\r\n    /**\r\n     * Get list of items\r\n     * @returns {Array}\r\n     */\r\n    function getItems() {\r\n        return items;\r\n    }\r\n}\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            return fnInitFilter;\r\n\r\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                if (!angular.isFunction(fnBefore)) {\r\n                    return null;\r\n                }\r\n\r\n                var _i, _len, _nodes,\r\n                    _nodePassed  = fnBefore(options, node),\r\n                    _childPassed = false;\r\n\r\n                if (angular.isDefined(node[fieldChild])) {\r\n                    _nodes = node[fieldChild];\r\n                    _len   = _nodes.length;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                       _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                    }\r\n                }\r\n\r\n                if (angular.isFunction(fnAfter)) {\r\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                }\r\n\r\n                return _nodePassed || _childPassed;\r\n            }\r\n\r\n            /**\r\n             * Check data with callback\r\n             * @param {string|object|function|regex} callback\r\n             * @param {*} data\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnCheck(callback, data) {\r\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\r\n                    return null;\r\n                }\r\n\r\n                if (angular.isFunction(callback)) {\r\n                    return callback(data, $filter);\r\n                } else {\r\n                    if (typeof callback === 'boolean') {\r\n                        data = !!data;\r\n                        return data === callback;\r\n                    } else if (angular.isDefined(callback)) {\r\n                        try {\r\n                            var _regex = new RegExp(callback);\r\n                            return _regex.test(data);\r\n                        }\r\n                        catch (err) {\r\n                            if (typeof data === 'string') {\r\n                                return data.indexOf(callback) > -1;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\r\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\r\n             *\r\n             * @param node\r\n             * @param condition\r\n             * @param isAnd\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnProccess(node, condition, isAnd) {\r\n                if (angular.isArray(condition)) {\r\n                    return for_each_filter(node, condition, isAnd);\r\n                } else {\r\n                    var _key      = condition.field,\r\n                        _callback = condition.callback,\r\n                        _iO, _keysO, _lenO;\r\n\r\n                    if (_key === '_$') {\r\n                        _keysO = Object.keys(node);\r\n                        _lenO  = _keysO.length;\r\n                        for (_iO = 0; _iO < _lenO; _iO++) {\r\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else if (angular.isDefined(node[_key])) {\r\n                        return _fnCheck(_callback, node[_key]);\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {object} node\r\n             * @param {array} conditions Array `conditions`\r\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\r\n             * @returns {null|boolean}\r\n             */\r\n            function for_each_filter(node, conditions, isAnd) {\r\n                var i, len = conditions.length || 0, passed = false;\r\n                if (len === 0) {\r\n                    return null;\r\n                }\r\n\r\n                for (i = 0; i < len; i++) {\r\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                        passed = true;\r\n                        // if condition `or` then return;\r\n                        if (!isAnd) {\r\n                            return true;\r\n                        }\r\n                    } else {\r\n\r\n                        // if condition `and` and result in fnProccess = false then return;\r\n                        if (isAnd) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return passed;\r\n            }\r\n\r\n            /**\r\n             * Will call _fnAfter to clear data no need\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @param {boolean} isNodePassed\r\n             * @param {boolean} isChildPassed\r\n             * @param {boolean} isParentPassed\r\n             * @private\r\n             */\r\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                if (isNodePassed === true) {\r\n                    node.__filtered__         = true;\r\n                    node.__filtered_visible__ = true;\r\n                    return; //jmp\r\n                } else if (isChildPassed === true && options.showParent === true\r\n                           || isParentPassed === true && options.showChild === true) {\r\n                    node.__filtered__         = false;\r\n                    node.__filtered_visible__ = true;\r\n                    return; //jmp\r\n                }\r\n\r\n                // remove attr __filtered__\r\n                delete node.__filtered__;\r\n                delete node.__filtered_visible__;\r\n            }\r\n\r\n            /**\r\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\r\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\r\n             *\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnBefore(options, node) {\r\n                if (options.filter.length === 0) {\r\n                    return true;\r\n                } else {\r\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\r\n             *\r\n             * @param {object|array} filters\r\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\r\n             * @private\r\n             */\r\n            function _fnConvert(filters) {\r\n                var _iF, _lenF, _keysF,\r\n                    _filter,\r\n                    _state;\r\n                // convert filter object to array filter\r\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                    _keysF  = Object.keys(filters);\r\n                    _lenF   = _keysF.length;\r\n                    _filter = [];\r\n\r\n                    if (_lenF > 0) {\r\n                        for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                continue;\r\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                _state = filters[_keysF[_iF]];\r\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                _state = _fnConvert(filters[_keysF[_iF]]);\r\n                            } else {\r\n                                _state = {\r\n                                    field:    _keysF[_iF],\r\n                                    callback: filters[_keysF[_iF]]\r\n                                };\r\n                            }\r\n                            _filter.push(_state);\r\n                        }\r\n                    }\r\n                    _state = null;\r\n                    return _filter;\r\n                }\r\n                else {\r\n                    return filters;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\r\n             * @constructor\r\n             * @param {object|array} treeData\r\n             * @param {object|array} filters\r\n             * @param {object} options\r\n             * @param {string} keyChild\r\n             * @returns {array} Return `treeData` or `treeData` with `filter`\r\n             * @private\r\n             */\r\n            function fnInitFilter(treeData, filters, options, keyChild) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0\r\n                    || !(angular.isArray(filters) || angular.isObject(filters))\r\n                    || filters.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _filter;\r\n\r\n                _filter = _fnConvert(filters);\r\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                    || _filter.length === 0) {\r\n                    return treeData;\r\n                }\r\n                options.filter = _filter;\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    for_all_descendants(\r\n                        options,\r\n                        treeData[_i],\r\n                        keyChild || '__children__',\r\n                        _fnBefore, _fnAfter\r\n                    );\r\n                }\r\n\r\n                return treeData;\r\n            }\r\n\r\n        }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    return _fnOrder(treeData, orderBy);\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            function _fnPlaceHolder(e, $params) {\r\n                if ($params.placeElm) {\r\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function _fnDragStart(e, $params) {\r\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                    // disable right click\r\n                    return;\r\n                }\r\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\r\n                    return;\r\n                }\r\n                // the element which is clicked.\r\n                var eventElm   = angular.element(e.target),\r\n                    eventScope = eventElm.scope();\r\n                if (!eventScope || !eventScope.$type) {\r\n                    return;\r\n                }\r\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                //     return;\r\n                // }\r\n\r\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                    return;\r\n                }\r\n\r\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                    dragScope,\r\n                    _$scope         = $params.$scope;\r\n                if (eventElmTagName === 'input'\r\n                    || eventElmTagName === 'textarea'\r\n                    || eventElmTagName === 'button'\r\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                    return;\r\n                }\r\n                // check if it or it's parents has a 'data-nodrag' attribute\r\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                        return;\r\n                    }\r\n                    eventElm = eventElm.parent();\r\n                }\r\n\r\n                e.uiTreeDragging = true; // stop event bubbling\r\n                if (e.originalEvent) {\r\n                    e.originalEvent.uiTreeDragging = true;\r\n                }\r\n                e.preventDefault();\r\n\r\n                dragScope = eventScope.getScopeNode();\r\n\r\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\r\n                    return;\r\n                }\r\n\r\n                $params.firstMoving = true;\r\n                _$scope.setDragging($params.dragInfo);\r\n\r\n                var eventObj = $TreeDnDHelper.eventObj(e);\r\n                $params.pos  = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                if (dragScope.isTable) {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                        .addClass(_$scope.$class.tree)\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass(_$scope.$tree_class);\r\n                } else {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass('tree-dnd-nodes')\r\n                        .addClass(_$scope.$tree_class);\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                        'z-index': 9995\r\n                    }\r\n                );\r\n\r\n                $params.offsetEdge = 0;\r\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\r\n                    _scope         = dragScope,\r\n                    _element       = _scope.$element,\r\n                    _clone,\r\n                    _needCollapse  = !!_$scope.enabledCollapse,\r\n                    _copied        = false,\r\n                    _tbody,\r\n                    _frag;\r\n\r\n                if (_scope.isTable) {\r\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                    _tbody             = angular.element(document.createElement('tbody'));\r\n                    _frag              = angular.element(document.createDocumentFragment());\r\n\r\n                    _$scope.for_all_descendants(\r\n                        $params.dragInfo.node, function (_node, _parent) {\r\n                            _scope   = _$scope.getScope(_node);\r\n                            _element = _scope && _scope.$element;\r\n                            if (_scope && _element) {\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _$scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _frag.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n\r\n                                    // hide if have status Move;\r\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\r\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\r\n                                        _element.addClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            }\r\n                            // skip children of node not expand.\r\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\r\n\r\n                        }, null, !_needCollapse\r\n                    );\r\n                    _tbody.append(_frag);\r\n                    $params.dragElm.append(_tbody);\r\n                } else {\r\n\r\n                    _clone = _element.clone();\r\n                    if (_needCollapse) {\r\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\r\n                    }\r\n\r\n                    // hide if have status Move;\r\n                    $params.dragElm.append(_clone);\r\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                        _element.addClass(_$scope.$class.hidden);\r\n                    }\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                        ) + 'px',\r\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                    }\r\n                );\r\n                // moving item with descendant\r\n                $params.$document.find('body').append($params.dragElm);\r\n                if (_$scope.$callbacks.droppable()) {\r\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                    if (dragScope.isTable) {\r\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                    }\r\n\r\n                    $params.placeElm.css('width', _width);\r\n                }\r\n\r\n                _$scope.showPlace();\r\n                _$scope.targeting  = true;\r\n\r\n                if (_$scope.enabledStatus) {\r\n                    _$scope.refreshStatus();\r\n                    _$scope.setPositionStatus(e);\r\n                }\r\n\r\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                $params.document_height = Math.max(\r\n                    $params.body.scrollHeight,\r\n                    $params.body.offsetHeight,\r\n                    $params.html.clientHeight,\r\n                    $params.html.scrollHeight,\r\n                    $params.html.offsetHeight\r\n                );\r\n\r\n                $params.document_width = Math.max(\r\n                    $params.body.scrollWidth,\r\n                    $params.body.offsetWidth,\r\n                    $params.html.clientWidth,\r\n                    $params.html.scrollWidth,\r\n                    $params.html.offsetWidth\r\n                );\r\n            }\r\n\r\n            function _fnDragMove(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (!$params.dragStarted) {\r\n                    if (!$params.dragDelaying) {\r\n                        $params.dragStarted = true;\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStart($params.dragInfo);\r\n                            }\r\n                        );\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if ($params.dragElm) {\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if (topElmPos + 10 > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if (leftElmPos + 10 > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                    $params.offsetEdge + 1,\r\n                                    true,\r\n                                    true\r\n                            ) + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        isChanged  = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info      = $params.dragInfo,\r\n                        _move      = _info.move,\r\n                        _drag      = _info.node,\r\n                        _drop      = _info.drop,\r\n                        treeScope  = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder   = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                         elementFromPoint() twice to make sure IE8 returns the correct value\r\n                         $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\r\n                            // Not allowed Drop Item\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target   = _info.target;\r\n\r\n                            if (_info.target !== treeScope) {\r\n                                // Replace by place-holder new\r\n                                _target.hidePlace();\r\n                                _target.targeting   = false;\r\n                                treeScope.targeting = true;\r\n\r\n                                _info.target     = treeScope;\r\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                _target   = null;\r\n                                isSwapped = true;\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal  = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos    = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n                            if (angular.isUndefinedOrNull(targetElm)) {\r\n                                return;\r\n                            }\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !targetScope.isTable) {\r\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\r\n                            } else {\r\n                                if (targetScope.isTable) {\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos    = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos    = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         _info.drag === _info.target &&\r\n                                         _target.__index_real__ === _drag.__parent_real__ &&\r\n                                         _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\r\n                                    ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                    ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move    = _move;\r\n                        _info.drop    = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope   = targetScope;\r\n\r\n                        if (targetScope.isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop  = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope  = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            function _fnDragEnd(e, $params) {\r\n                e.preventDefault();\r\n                if ($params.dragElm) {\r\n                    var _passed     = false,\r\n                        _$scope     = $params.$scope,\r\n                        _scope      = _$scope.getScope($params.dragInfo.node),\r\n                        _element    = _scope.$element;\r\n\r\n                    _$scope.$safeApply(\r\n                        function () {\r\n                            _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                        }\r\n                    );\r\n\r\n                    // rollback all\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node, _parent) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                                return _node.__visible__ === false || _node.__expanded__ === false\r\n                            }, null, true\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.remove();\r\n                    $params.dragElm = null;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    if (_$scope.$$apply) {\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                var _status = _$scope.$callbacks.dropped(\r\n                                    $params.dragInfo,\r\n                                    _passed\r\n                                );\r\n\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                                clearData();\r\n                            }\r\n                        );\r\n                    } else {\r\n                        _fnBindDrag($params);\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, false);\r\n                                clearData();\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n\r\n                function clearData() {\r\n                    $params.dragInfo.target.hidePlace();\r\n                    $params.dragInfo.target.targeting = false;\r\n\r\n                    $params.dragInfo = null;\r\n                    _$scope.$$apply  = false;\r\n                    _$scope.setDragging(null);\r\n                }\r\n\r\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n            }\r\n\r\n            function _fnDragStartEvent(e, $params) {\r\n                if ($params.$scope.$callbacks.draggable()) {\r\n                    _fnDragStart(e, $params);\r\n                }\r\n            }\r\n\r\n            function _fnBindDrag($params) {\r\n                $params.element.bind(\r\n                    'touchstart mousedown', function (e) {\r\n                        $params.dragDelaying = true;\r\n                        $params.dragStarted  = false;\r\n                        _fnDragStartEvent(e, $params);\r\n                        $params.dragTimer    = $timeout(\r\n                            function () {\r\n                                $params.dragDelaying = false;\r\n                            }, $params.$scope.dragDelay\r\n                        );\r\n                    }\r\n                );\r\n\r\n                $params.element.bind(\r\n                    'touchend touchcancel mouseup', function () {\r\n                        $timeout.cancel($params.dragTimer);\r\n                    }\r\n                );\r\n            }\r\n\r\n            function _fnKeydownHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (e.keyCode === 27) {\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    _$scope.$$apply = false;\r\n                    _fnDragEnd(e, $params);\r\n                } else {\r\n                    if (_$scope.enabledHotkey && e.shiftKey) {\r\n                        _$scope.enableMove(true);\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                            _element = _scope.$element;\r\n\r\n                        if (_scope.isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node, _parent) {\r\n                                    _scope   = _$scope.getScope(_node);\r\n                                    _element = _scope && _scope.$element;\r\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                    return _node.__visible__ === false || _node.__expanded__ === false\r\n\r\n                                }, null, true\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.addClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _fnKeyupHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                    _$scope.enableMove(false);\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                    }\r\n\r\n                    if (!$params.dragInfo) {\r\n                        return;\r\n                    }\r\n\r\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                        _element = _scope.$element;\r\n\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node, _parent) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                                return _node.__visible__ === false || _node.__expanded__ === false\r\n                            }, null, true\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _$init(scope, element, $window, $document) {\r\n                var $params        = {\r\n                        hasTouch:        'ontouchstart' in window,\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params);\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                    keydownHandler = function (e) {\r\n                        return _fnKeydownHandler(e, $params);\r\n                    },\r\n                    keyupHandler   = function (e) {\r\n                        return _fnKeyupHandler(e, $params);\r\n                    };\r\n\r\n                scope.dragEnd = function (e) {\r\n                    $params.dragEnd(e);\r\n                };\r\n\r\n                $params.bindDrag();\r\n\r\n                angular.element($window.document.body).bind('keydown', keydownHandler);\r\n                angular.element($window.document.body).bind('keyup', keyupHandler);\r\n                //unbind handler that retains scope\r\n                scope.$on(\r\n                    '$destroy', function () {\r\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\r\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\r\n                        if (scope.statusElm) {\r\n                            scope.statusElm.remove();\r\n                        }\r\n\r\n                        if (scope.placeElm) {\r\n                            scope.placeElm.remove();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n);\r\n\r\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len;\r\n\r\n        function fnSetCollapse(node) {\r\n            node.__expanded__ = false;\r\n        }\r\n\r\n        function fnSetExpand(node) {\r\n            node.__expanded__ = true;\r\n        }\r\n\r\n        function _$init(scope) {\r\n            var n, tree = {\r\n                selected_node:       null,\r\n                for_all_descendants: scope.for_all_descendants,\r\n                select_node:         function (node) {\r\n                    if (!node) {\r\n                        if (tree.selected_node) {\r\n                            delete tree.selected_node.__selected__;\r\n                        }\r\n                        tree.selected_node = null;\r\n                        return null;\r\n                    }\r\n\r\n                    if (node !== tree.selected_node) {\r\n                        if (tree.selected_node) {\r\n                            delete tree.selected_node.__selected__;\r\n                        }\r\n                        node.__selected__  = true;\r\n                        tree.selected_node = node;\r\n                        tree.expand_all_parents(node);\r\n                        if (angular.isFunction(tree.on_select)) {\r\n                            tree.on_select(node);\r\n                        }\r\n                    }\r\n                    return node;\r\n                },\r\n                deselect_node:       function () {\r\n                    _target = null;\r\n                    if (tree.selected_node) {\r\n                        delete tree.selected_node.__selected__;\r\n                        _target            = tree.selected_node;\r\n                        tree.selected_node = null;\r\n                    }\r\n                    return _target;\r\n                },\r\n                get_parent:          function (node) {\r\n                    if (node && node.__parent_real__ !== null) {\r\n                        return scope.tree_nodes[node.__parent_real__];\r\n                    }\r\n                    return null;\r\n                },\r\n                for_all_ancestors:   function (child, fn) {\r\n                    _parent = tree.get_parent(child);\r\n                    if (_parent) {\r\n                        if (fn(_parent)) {\r\n                            return false;\r\n                        }\r\n\r\n                        return tree.for_all_ancestors(_parent, fn);\r\n                    }\r\n                    return true;\r\n                },\r\n                expand_all_parents:  function (child) {\r\n                    child = child || tree.selected_node;\r\n                    if (typeof child === 'object') {\r\n                        tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        )\r\n                    }\r\n                },\r\n                collapse_all_parents:               function (child) {\r\n                    child = child || tree.selected_node;\r\n                    if (typeof child === 'object') {\r\n                        tree.for_all_ancestors(\r\n                            child, fnSetCollapse\r\n                        )\r\n                    }\r\n                },\r\n\r\n                reload_data:                       function () {\r\n                    return scope.reload_data();\r\n                },\r\n                add_node:                          function (parent, new_node, index) {\r\n                    if (typeof index !== 'number') {\r\n                        if (parent) {\r\n                            parent.__children__.push(new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.push(new_node);\r\n                        }\r\n                    } else {\r\n                        if (parent) {\r\n                            parent.__children__.splice(index, 0, new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.splice(index, 0, new_node);\r\n                        }\r\n                    }\r\n                    return new_node;\r\n                },\r\n                add_node_root:                     function (new_node) {\r\n                    tree.add_node(null, new_node);\r\n                    return new_node;\r\n                },\r\n                expand_all:                        function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        tree.for_all_descendants(\r\n                            scope.treeData[i], fnSetExpand\r\n                        );\r\n                    }\r\n                },\r\n                collapse_all:                      function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        tree.for_all_descendants(\r\n                            scope.treeData[i], fnSetCollapse\r\n                        );\r\n                    }\r\n                },\r\n                remove_node:                       function (node) {\r\n                    var lastElement = false;\r\n                    node = node || tree.selected_node;\r\n                    if (node) {\r\n                        if (node.__parent_real__ !== null) { //!=null\r\n                            _parent = tree.get_parent(node).__children__;\r\n                        } else {\r\n                            _parent = scope.treeData;\r\n                            if(scope.treeData.length === 1) {\r\n                                lastElement = true;\r\n                            }\r\n                        }\r\n\r\n                        _parent.splice(node.__index__, 1);\r\n                        if(lastElement) {\r\n                            //delete(scope.tree_nodes);\r\n                            scope.tree_nodes = [];\r\n                        }\r\n\r\n                        if (tree.selected_node === node) {\r\n                            tree.selected_node = null;\r\n                        }\r\n                    }\r\n                },\r\n                expand_node:                       function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object' && node.__expanded__) {\r\n                        node.__expanded__ = true;\r\n                        return node;\r\n                    }\r\n                },\r\n                collapse_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        node.__expanded__ = false;\r\n                        return node;\r\n                    }\r\n                },\r\n                get_selected_node:                 function () {\r\n                    return tree.selected_node;\r\n                },\r\n                get_first_node:                    function () {\r\n                    len = scope.treeData.length;\r\n                    if (len > 0) {\r\n                        return scope.treeData[0];\r\n                    }\r\n                    return null;\r\n                },\r\n                get_children:                      function (node) {\r\n                    return node.__children__;\r\n                },\r\n                get_siblings:                      function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _parent = tree.get_parent(node);\r\n                        if (_parent) {\r\n                            _target = _parent.__children__;\r\n                        } else {\r\n                            _target = scope.treeData;\r\n                        }\r\n                        return _target;\r\n                    }\r\n                },\r\n                get_next_sibling:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_siblings(node);\r\n                        n       = _target.length;\r\n                        if (node.__index__ < n) {\r\n                            return _target[node.__index__ + 1];\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_sibling:                  function (node) {\r\n                    node    = node || tree.selected_node;\r\n                    _target = tree.get_siblings(node);\r\n                    if (node.__index__ > 0) {\r\n                        return _target[node.__index__ - 1];\r\n                    }\r\n                },\r\n                get_first_child:                   function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _target = node.__children__;\r\n                        if (_target && _target.length > 0) {\r\n                            return node.__children__[0];\r\n                        }\r\n                    }\r\n                    return null;\r\n                },\r\n                get_closest_ancestor_next_sibling: function (node) {\r\n                    node    = node || tree.selected_node;\r\n                    _target = tree.get_next_sibling(node);\r\n                    if (_target) {\r\n                        return _target;\r\n                    }\r\n\r\n                    _parent = tree.get_parent(node);\r\n                    return tree.get_closest_ancestor_next_sibling(_parent);\r\n                },\r\n                get_next_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_first_child(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        } else {\r\n                            return tree.get_closest_ancestor_next_sibling(node);\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return tree.get_last_descendant(_target);\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return _parent;\r\n                    }\r\n                },\r\n                get_last_descendant:               scope.getLastDescendant,\r\n                select_parent_node:                function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _parent = tree.get_parent(node);\r\n                        if (_parent) {\r\n                            return tree.select_node(_parent);\r\n                        }\r\n                    }\r\n                },\r\n                select_first_node:                 function () {\r\n                    var firstNode = tree.get_first_node();\r\n                    return tree.select_node(firstNode);\r\n                },\r\n                select_next_sibling:               function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_sibling:               function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_next_node:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_next_node(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_node:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_node(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            angular.extend(scope.tree, tree);\r\n            return scope.tree;\r\n        }\r\n\r\n        return _$init;\r\n    }\r\n);\r\n\r\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            ['<table ng-class=\"$tree_class\">',\r\n             '    <thead>',\r\n             '  <tr>',\r\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\r\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\r\n             '        <\\/th>',\r\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\r\n             '         {{col.displayName || col.field}}',\r\n             '     </th>',\r\n             '    </tr>',\r\n             '    </thead>',\r\n             ' <tbody tree-dnd-nodes>',\r\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\r\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\r\n             '       ng-click=\"onSelect(node)\" ',\r\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\r\n             '        <td tree-dnd-node-handle',\r\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\r\n             '          ng-class=\"expandingProperty.cellClass\"',\r\n             '          compile=\"expandingProperty.cellTemplate\">',\r\n             '              <a data-nodrag>',\r\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\r\n             '                     class=\"tree-icon\"></i>',\r\n             '              </a>',\r\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\r\n             '        </td>',\r\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\r\n             '            compile=\"col.cellTemplate\">',\r\n             '            {{node[col.field]}}',\r\n             '        </td>',\r\n             '    </tr>',\r\n             '    </tbody>',\r\n             '</table>'].join('\\n')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n    function isUndefinedOrNull(val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    function isDefined(val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n})();"],"sourceRoot":"/source/"}